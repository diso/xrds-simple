<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<rfc category="info" ipr="full3978" docName="xrds-simple-1_0.xml">

  <?rfc toc="yes" ?>
  <?rfc tocdepth="3" ?>
  <?rfc symrefs="yes" ?>
  <?rfc sortrefs="yes"?>
  <?rfc strict="yes" ?>
  <?rfc iprnotified="no" ?>
  <?rfc private="Implementers' Draft" ?>

  <front>
    
    <title abbrev="XRDS-Simple 1.0 D2">XRDS-Simple 1.0 Draft 2x</title>

    <author initials="E" surname="Hammer-Lahav" fullname="Eran Hammer-Lahav">
      <organization>Yahoo!</organization>
      <address>
        <email>eran@hueniverse.com</email>
      </address>
    </author>

    <date day="7" month="August" year="2008"/>

    <abstract>
      <t>
        XRDS-Simple provides a format and workflow for the discovery of a resource's metadata
        and other linked resources. It allows providers to document their resources
        in a machine-readable way, enabling automatic discovery by consumer applications.
        Discovery enables applications to utilizie a wide range of web services
        and resources across multiple providers without the need to know about them ahead
        of time.
      </t>
      <t>
        The XRDS-Simple specification builds on top of existing practices first introduced
        by the XRI community and later adopted and further developed by Yadis, a discovery
        protocol widely used by the OpenID community. The goal of XRDS-Simple is to provide an
        independent and easy to implement solution that is focused on solving the most common
        discovery use cases.
      </t>
    </abstract>

  </front>
  
  <middle>

    <section title="Notation and Conventions">
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref target="RFC2119" />.
        Domain name examples use <xref target="RFC2606" />.
      </t>
    </section>

    <section title="Introduction">
      <t>
        XRDS-Simple provides a discovery protocol and document format which add
        machine-readable metadata for HTTP-based Resources. It defines a method
        in which an HTTP URI can be queried for its properties and related Resources.
        The metadata allows Consumers to enhance their interaction with the Resource
        by understanding its interfaces, access methods, and relationship to other Resources.
      </t>
      <t>
        XRDS-Simple does not attempt to replace existing metadata containers such as HTTP headers or
        <xref target="Microformats" />. It addresses the use cases in which the Resource is not an
        HTML document, the metadata is not appropriate for end-user display, or the size of the
        metadata is not appropriate for inclusion in the HTTP header.
      </t>

      <section title="OpenID, Yadis, and XRI">
        <t>
          The XRDS discovery document format originated at the OASIS XRI (Extensible Resource Identifier)
          Technical Committee working in conjunction with the early OpenID community. The acronym XRDS -
          Extensible Resource Descriptor Sequence - was coined out of discussions between XRI TC members
          and OpenID developers at first Internet Identity Workshop held in Berkeley, CA in October 2005.
        </t>
        <t>
          <xref target="OpenID Authentication 1.1" /> needed an HTTP(S)-based service discovery mechanism for URLs,
          and the XRI TC had already defined an HTTP(S)-based resolution mechanism and a general-purpose service
          discovery format for XRIs (a new type of abstract structured identifier). With a few changes,
          a subset of the XRDS functionality defined by the XRI Resolution specification would work with
          both URLs and XRIs. This subset was formalized as the <xref target="Yadis" /> specification
          published in March 2006, and Yadis subsequently became the service discovery format for OpenID 1.1.
        </t>
        <t>
          In November 2007 the <xref target="XRI Resolution 2.0" /> specification formally added the Yadis
          method for URL-based XRDS discovery as a single discovery service for both URLs and XRIs.
          The <xref target="OpenID Authentication 2.0" /> specification released in December 2007 referenced this
          updated specification. Since other applications and protocols needed only a subset of XRDS
          functionality, work began on formally defining this subset as XRDS-Simple.
        </t>
      </section>

      <section title="Relationship to XRDS Schema">
        <t>
          XRDS-Simple defines a subset of the XRDS schema detailed in <xref target="XRI Resolution 2.0" />,
          with a small set of extensions. In this specification, XRDS refers to the full schema defined
          in <xref target="XRI Resolution 2.0" />, while XRDS-Simple refers to the subset of XRDS and
          the extensions defined in <xref target="xrds_simple_format" />.
        </t>
        <t>
          The goal of XRDS-Simple is to provide a lightweight version of XRDS that simplifies the
          implementation of parsers while maintaining full compatibility with XRDS and any XRDS-compliant
          parsers and resolvers. It also serves as an introduction to XRDS, giving implementers an upgrade
          path to the other XRDS features when appropriate.
        </t>
        <t>
          By defining XRDS-Simple, Service Providers can declare the scope of their application, and parser
          developers can define their libraries' capabilities. Parsers can perform tests to assert that they
          are capable of processing input documents exactly as they were intended. This is of particular importance
          when processing documents with security or identity information, where misinterpretation
          of the intent of the document or author can lead to a breach of security.
        </t>
      </section>
      
    </section>
    
    <section title="Definitions">
      <t>
        <list style="hanging">
          <t hangText="Resource:">
            A network document or service addressable using an HTTP URI.
          </t>
          <t hangText="Discovery Document">
            An machine-readable XML-formatted document describing a group of Resources.
          </t>
          <t hangText="Service Provider:">
            A web application supporting XRDS-Simple discovery and providing Discovery Documents for its Resources.
          </t>
          <t hangText="Consumer:">
            A website or application that uses XRDS-Simple to discovery information
            about the Resources offered by a Service Provider.
          </t>
        </list>
      </t>
    </section>

    <section title="Workflow Overview">
      <t>
        The HTTP protocol provides a mechanism for requesting an alternative representation of a Resource using the
        <spanx style="verb">Accept</spanx> header as defined in <xref target="RFC2616" /> section 14.1.
        The Discovery Document is considered to be the <spanx style="verb">application/xrds+xml</spanx>
        content type representation of the Resource.
      </t>
      <t>
        The discovery workflow centers on the retrieval and parsing of the Discovery Document
        and includes the following steps:

        <list style="symbols">
          <t>
            The Resources is examined to determine if it supports XRDS-Simple discovery -
            described in <xref target="discovery_identification" />.
          </t>
          <t>
            The Discovery Document describing the Resource is obtained by making an HTTP request -
            described in <xref target="document_retrieval" />.
          </t>
          <t>
            The Discovery Document is parsed and broken into groups of services and their properties -
            described in <xref target="xrds_simple_format" />.
          </t>
          <t>
            The desired Resource information is selected from the complete Discovery Document set,
            providing the Consumer with the needed properties - described in <xref target="desc_selection"/>.
          </t>
        </list>
      </t>
    </section>

    <section title="Discovery Identification" anchor="discovery_identification">
      <t>
        The Consumer MAY perform Discovery before or after a Resource is obtained. Performing discovery
        ahead of requesting the Resource allows the Consumer to learn more about the properties of the
        Resource. For example, a Consumer can learn about the API supported by the Resource and if it is understood,
        use it to interact with the Resource. In some cases the Consumer will want to perform discovery
        after attempting to obtain the Resource. For example, when an attempt to access the Resource fails, the
        Consumer can discovery how to successfully access it.
      </t>
      <t>
        Service Providers SHOULD use the <spanx style="verb">X-XRDS-Location</spanx> header to indicate that a
        Resource supports discovery by returning the header with any request for the Resource itself. The header
        SHOULD be returned for both successful and failed attempts, as it inform the Consumer that additional
        information is available.
      </t>
      <t>
        If supported, the value of the <spanx style="verb">X-XRDS-Location</spanx> header MUST include an
        absolute HTTP(S) URI which gives the location of the Resource's Discovery Document. The URI MUST reference
        the same Discovery Document obtained by following the workflow defined in <xref target="obtaining_location" />.
        If the <spanx style="verb">X-XRDS-Location</spanx> header is present, the Consumer MAY skip the workflow defined in
        <xref target="obtaining_location" /> and proceed to <xref target="go_fetch">obtain the Discovery Document</xref>.
      </t>
      <t>
        If no <spanx style="verb">X-XRDS-Location</spanx> header is found, the Consumer MUST
        follow the full workflow defined in <xref target="document_retrieval" /> to identify whether discovery
        is supported.
      </t>
    </section>

    <section title="Document Retrieval" anchor="document_retrieval">
      <t>
        The Consumer obtains the Discovery Document by requesting the <spanx style="verb">application/xrds+xml</spanx>
        content type representation of the Resource. XRDS-Simple only defines
        a retrieval method for HTTP(S) URIs. While XRDS-Simple supports descriptions of
        non-HTTP(S) URIs, the method in which their associated Discovery Document
        is retrieved is beyond the scope of this specification.
      </t>
      <t>
        Document retrieval is performed in two steps. First the document's location is obtained from
        the Resource URI, then the location obtained is used to request the Discovery Document.
      </t>

      <section title="Obtaining Location" anchor="obtaining_location">
        <t>
          The Consumer MUST issue an HTTP(S) <spanx style="verb">GET</spanx> request to
          the Resource URI and include an <spanx style="verb">Accept</spanx> header
          specifying content type <spanx style="verb">application/xrds+xml</spanx>.
          If the URI contains a fragment as defined by <xref target="RFC3986" />
          section 3, it MUST be removed prior to making the request. The Service Provider response
          MUST be one of four options:

          <list style="numbers">
            <t>
              An HTTP redirect response with a <spanx style="verb">Location</spanx> header which the Consumer
              MUST follow by repeating the GET request with the provided URI.
            </t>
            <t>
              A <spanx style="verb">Content-Type</spanx> header with value <spanx style="verb">application/xrds+xml</spanx>.
              In this case the response body is the Discovery Document and the workflow ends successfully skipping the step
              described in <xref target="go_fetch" />.
            </t>
            <t>
              An <spanx style="verb">X-XRDS-Location</spanx> header where the value of the header MUST
              be an absolute HTTP(S) URI which gives the document's location.
            </t>
            <t>
              A valid HTML document in the response body, with a &lt;head&gt; element that includes a &lt;meta&gt;
              element with an <spanx style="verb">http-equiv</spanx> attribute equals to <spanx style="verb">X-XRDS-Location</spanx>.
              The value of the &lt;meta&gt; element <spanx style="verb">content</spanx> attribute MUST be an absolute
              HTTP(S) URI which gives the document's location.
            </t>
          </list>
        </t>
        <t>
          The Consumer MUST check the Service Provider's response for one of the four options in the order they are listed above, and
          MUST stop as soon as a match is found. If no match is found, the protocol fails and the discovery workflow ends unsuccessfully.
        </t>
        <t>
          NOTE: The Consumer MAY attempt to issue an HTTP(S) <spanx style="verb">HEAD</spanx> request to
          the Resource URI specifying the content type prior to issuing the HTTP(S) <spanx style="verb">GET</spanx> request.
          If the Service Provider's response is a redirect, or includes the <spanx style="verb">X-XRDS-Location</spanx>
          header without a <spanx style="verb">Content-Type</spanx> header with value <spanx style="verb">application/xrds+xml</spanx>,
          the Consumer can skip the HTTP(S) <spanx style="verb">GET</spanx> request, otherwise will have to repeating both requests.
          Using the <spanx style="verb">HEAD</spanx> request is NOT RECOMMENDED unless the Consumer knows the Service Provider is
          likely to reply with a redirect response or an <spanx style="verb">X-XRDS-Location</spanx>
          header without a <spanx style="verb">Content-Type</spanx> header with value <spanx style="verb">application/xrds+xml</spanx>.
        </t>
      </section>

      <section title="Requesting Document" anchor="go_fetch">
        <t>
          The Consumer SHOULD check if the document's location is identical to the Resource URI, excluding any
          differences in the URI fragments. If the URIs are considered identical, the discovery workflow
          ends unsuccessfully as that request has already failed to produce a valid XRDS-Simple document.
        </t>
        <t>
          The Consumer MUST request the Discovery Document from the location URI using an HTTP(S)
          <spanx style="verb">GET</spanx> request and SHOULD include an
          <spanx style="verb">Accept</spanx> header specifying content type <spanx style="verb">application/xrds+xml</spanx>.
          The Consumer MUST follow any HTTP redirect responses received while requesting the Discovery Document.
        </t>
        <t>
          The Service Provider MUST reply with a valid XRDS-Simple document in the response body. The Response SHOULD include
          the <spanx style="verb">Content-Type</spanx> header with value <spanx style="verb">application/xrds+xml</spanx>.
          If the response is not a valid XRDS-Simple document, the discovery workflow ends unsuccessfully.
        </t>
        <t>
          NOTE: If the document's location URI contains a fragment (not to be confused with an Resource URI fragment),
          it is used as an XRD identifier pointing to a specific XML element
          with an <spanx style="verb">xml:id</spanx> attribute of an identical value. The XRD identifier is described in
          <xref target="xrd_identification" />.
        </t>
      </section>
      
    </section>

    <section title="Document Structure" anchor="xrds_simple_format">
      <t>
        The Discovery Document groups together a list of Resources and their URIs. The document structure consists
        of three primary elements (listed in reverse hierarchical order):

        <list style="hanging">
          <t hangText="&lt;Service&gt;">
            Describes a Resource by assigning it a type and media-type, declaring its URIs, and
            provides any additional information relevant to the utilization of the Resource. For example,
            it describes a photo album, identity provider, or social network account.
          </t>
          <t hangText="&lt;XRD&gt;">
            Container element used to group together any number of <spanx style="verb">Service</spanx>
            elements, usually with some commonality. For example, a group of identity Resources or a list 
            of sites holding someone's photos.
          </t>
          <t hangText="&lt;XRDS&gt;">
            Container element used to group together any number of <spanx style="verb">XRD</spanx>
            elements with elements from other namespaces, usually with some common context. For example,
            documenting multiple groups of an individual's social networking accounts, grouped together
            based on persona (work, home, etc.).
          </t>
        </list>
      </t>

      <section title="Declarations and Requirements" anchor="requirements">
        <t>
          The Discovery Document MUST be a valid XRDS document, contain a single <spanx style="verb">XRDS</spanx>
          root element, and define the <spanx style="verb">xri://$xrds</spanx> namespace. While a valid XRDS-Simple document
          MAY include any number of <spanx style="verb">XRD</spanx> elements as well as elements from other namespaces, only
          XRDS-Simple compliant <spanx style="verb">XRD</spanx> elements are used in the discovery process.
        </t>
        <t>
          XRDS-Simple compliant <spanx style="verb">XRD</spanx> elements MUST define the
          <spanx style="verb">xri://$xrd*($v*2.0)</spanx> namespace as well as include the
          <spanx style="verb">version</spanx> attribute with value <spanx style="verb">2.0</spanx>.
          They MUST include a <spanx style="verb">Type</spanx> child with value <spanx style="verb">xri://$xrds*simple</spanx>.
          For the remainder of this specification, <spanx style="verb">XRD</spanx> elements refer only to XRDS-Simple compliant
          <spanx style="verb">XRD</spanx> elements.
          For example:

          <figure>
            <artwork>
      &lt;XRDS xmlns="xri://$xrds"&gt;
        &lt;XRD xmlns="xri://$xrd*($v*2.0)" version="2.0"&gt;
          &lt;Type&gt;xri://$xrds*simple&lt;/Type&gt;
        &lt;/XRD&gt;
      &lt;/XRDS&gt;
            </artwork>
          </figure>
        </t>
        <t>
          If an XRDS-Simple document contains more than one XRDS-Simple compliant <spanx style="verb">XRD</spanx> element,
          they SHOULD all be assigned unique identifiers using the <spanx style="verb">xml:id</spanx> attribute. XRDS-Simple
          only provides a limited selection method of choosing between <spanx style="verb">XRD</spanx> elements, in which
          case, if a document contains more than one <spanx style="verb">XRD</spanx> element, the unique XRD identifier is
          used to point to a specific element as described in <xref target="xrd_identification" />.
        </t>
        <t>
          The Consumer MAY ignore any other child element of the root <spanx style="verb">XRDS</spanx> element, including
          non-compliant <spanx style="verb">XRD</spanx> elements or elements from other namespaces. The presence of such
          element MUST NOT alter the way in which the document is processed as defined in this specification.
        </t>
      </section>

      <section title="XRD Element" anchor="xrd_element">
        <t>
          The <spanx style="verb">XRD</spanx> element is a container used to group together
          any number of Resources. The <spanx style="verb">XRD</spanx> element supports the
          following attributes:

          <list style="hanging">
            <t hangText="xml:id">
              OPTIONAL with type xs:ID, used to uniquely identify this element within the containing
              <spanx style="verb">XRDS</spanx> root element. The attribute is RECOMMENDED if the document contains more than
              one <spanx style="verb">XRD</spanx> element and its usage is defined in <xref target="xrd_identification" />.
              Note that this attribute is an implicit XML attribute defined in <xref target="xml:id"/>.
            </t>
            <t hangText="version">
              REQUIRED with type xs:string and a value of <spanx style="verb">2.0</spanx>.
            </t>
          </list>
        </t>
        <t>
          The <spanx style="verb">XRD</spanx> element supports the following child
          elements:
          
          <list style="hanging">
            <t hangText="&lt;Type&gt;">
              1 or more per <spanx style="verb">XRD</spanx> element with type xs:anyURI. The
              <spanx style="verb">Type</spanx> element describes the nature of the
              <spanx style="verb">XRD</spanx> element, how it should be processed, and
              the context in which it is used.
              Each <spanx style="verb">XRD</spanx> element MUST include one and only
              one <spanx style="verb">Type</spanx> element with the value
              <spanx style="verb">xri://$xrds*simple</spanx>, and MAY include any number
              of other <spanx style="verb">Type</spanx> elements. The element MAY also
              be used to describe the group of Resources included within.
            </t>
            <t hangText="&lt;Expires&gt;">
              0 or 1 per <spanx style="verb">XRD</spanx> element with type xs:dateTime.
              The date and time without fractional seconds in UTC "Z" time zone, after which
              the <spanx style="verb">XRD</spanx> element MUST NOT be used. If the
              Discovery Document was obtained via HTTP, and the HTTP headers specified
              an expiry time per section 13.2 of <xref target="RFC2616" />, the <spanx style="verb">XRD</spanx> element MUST NOT
              be used after the earlier of the two times passes.
            </t>
            <t hangText="&lt;Service&gt;">
              0 or more per <spanx style="verb">XRD</spanx> element as defined in
              <xref target="service_element" />.
            </t>
          </list>
        </t>
      </section>

      <section title="Service Element" anchor="service_element">
        <t>
          The <spanx style="verb">Service</spanx> element describes a Resource and provides elements to declare
          its URIs and other properties. The <spanx style="verb">Service</spanx> element supports the
          following attributes:

          <list style="hanging">
            <t hangText="priority">
              OPTIONAL with type xs:nonNegativeInteger as defined by <xref target="priority_attribute" />. Used to
              set the order of preference between Resources that would otherwise be considered of equal purpose.
              RECOMMENDED when an <spanx style="verb">XRD</spanx> element contains multiple
              <spanx style="verb">Service</spanx> elements with identical types or media-types association.
            </t>
          </list>
        </t>
        <t>
          The <spanx style="verb">Service</spanx> element supports the following child
          elements:

          <list style="hanging">
            <t hangText="&lt;Type&gt;">
              0 or more per <spanx style="verb">Service</spanx> element with type xs:anyURI. The
              <spanx style="verb">Type</spanx> element describes the nature of the
              Resource, how it should be accessed, and the context in which it is selected. The value
              of the <spanx style="verb">Type</spanx> element MUST be an absolute URI. Each
              <spanx style="verb">Service</spanx> element MUST include at least one of either
              <spanx style="verb">Type</spanx> element or <spanx style="verb">MediaType</spanx> element,
              but MAY include any number of both.
            </t>
            <t hangText="&lt;MediaType&gt;">
              0 or more per <spanx style="verb">Service</spanx> element with type xs:string. Describes
              the media-type of the content available at this Resource. The value MUST be a valid media-type
              as defined in <xref target="RFC2046" />. Each
              <spanx style="verb">Service</spanx> element MUST include at least one of either
              <spanx style="verb">Type</spanx> element or <spanx style="verb">MediaType</spanx> element,
              but MAY include any number of both.
            </t>
            <t hangText="&lt;URI&gt;">
              0 or more per <spanx style="verb">Service</spanx> element with type xs:anyURI. Provides the URI where
              the Resource can be found and used or retrieved. If no <spanx style="verb">URI</spanx> element is defined,
              it is assumed the URI can be obtained by other means not specified in this specification. Supports
              the OPTIONAL <spanx style="verb">priority</spanx> attribute as defined by <xref target="priority_attribute" />.
            </t>
            <t hangText="&lt;LocalID&gt;">
              0 or more per <spanx style="verb">Service</spanx> element with type xs:anyURI. Provides a standard way to indicate
              the identifier associated with the Resource at the URI where it is located. The value and meaning of the element
              is specific to the Resource and its type, and is beyond the scope of this specification. Supports
              the OPTIONAL <spanx style="verb">priority</spanx> attribute as defined by <xref target="priority_attribute" />. For example,
              this element is useful when the local identifier such as username, is not part of the URI, but is provided as a parameter.
            </t>
            <t hangText="&lt;simple:MustSupport&gt;">
              0 or more per <spanx style="verb">Service</spanx> element with type xs:anyURI as defined by <xref target="MustSupport_element" />.
              Defines requirements the Consumer MUST meet in order to utilize the Resource described.
            </t>
            <t hangText="&lt;simple:TemplateURI&gt;">
              0 or more per <spanx style="verb">Service</spanx> element with type xs:string as defined by <xref target="TemplateURI_element" />.
              Provides a templatized URI which is dynamically constructed in addition or instead of a fixed URI defined by
              <spanx style="verb">URI</spanx> elements.
            </t>
          </list>
        </t>
        <t>
          When selecting between multiple <spanx style="verb">Service</spanx> elements, the types and media-types of each Resource
          are used together with the relative priorities, to find the most appropriate Resource.
        </t>
      </section>
      
      <section title="priority Attribute" anchor="priority_attribute">
        <t>
          XRDS-Simple allows the <spanx style="verb">Service</spanx>, <spanx style="verb">URI</spanx>, and <spanx style="verb">LocalID</spanx>
          elements to appear multiple times within the same parent element to provide redundancy, flexibility, or other purposes. When these
          elements appear more than once within the same parent, Service Providers SHOULD use the <spanx style="verb">priority</spanx> attribute
          to prioritize selection of these element instances.
        </t>
        <t>
          The <spanx style="verb">priority</spanx> attribute type is xs:nonNegativeInteger - its value MUST be a non-negative integer value.
          The attribute works in a similar manner to DNS records priority, where the lowest value has the highest priority. This means zero
          has the highest priority and infinity - represented as the value <spanx style="verb">null</spanx> - carries the lowest priority.
          If omitted, the element's priority value defaults to <spanx style="verb">null</spanx>, however, instead of omitting the attribute,
          it is RECOMMENDED to set the priority value to <spanx style="verb">10</spanx>. When a Service Provider wishes to indicate a very
          low priority, it is RECOMMENDED to use a large finite value (100 or higher) rather than explicitly use the value
          <spanx style="verb">null</spanx>.
        </t>
        <t>
          Consumers SHOULD select the element with the highest priority - the lowest numeric value of the priority attribute. In the following
          example, the URIs decreasing order of priority is <spanx style="verb">0</spanx>, <spanx style="verb">10</spanx>, <spanx style="verb">11</spanx>,
          <spanx style="verb">25</spanx>, and last <spanx style="verb">null</spanx> and the element with the omitted attribute (equally low).

          <figure>
            <artwork>
      &lt;Service&gt;
          &lt;URI priority="10"&gt;http://example.com/second&lt;/URI&gt;
          &lt;URI priority="null"&gt;http://example.com/lowest&lt;/URI&gt;
          &lt;URI priority="25"&gt;http://example.com/fourth&lt;/URI&gt;
          &lt;URI priority="11"&gt;http://example.com/third&lt;/URI&gt;
          &lt;URI priority="0"&gt;http://example.com/highest&lt;/URI&gt;
          &lt;URI&gt;http://example.com/lowest&lt;/URI&gt;
      &lt;/Service&gt;
            </artwork>
          </figure>
        </t>
        <t>
          If two or more instances of the same element type have identical <spanx style="verb">priority</spanx> attribute values (including the <spanx style="verb">null</spanx> value),
          the Consumer SHOULD select one of the instances at random. The Consumer SHOULD NOT choose the first instance that appears in XML document order.
          This is needed to support the Service Provider's redundancy or load balancing intentions.
        </t>
        <t>
          The element selected according to these rules is referred to as the highest priority element. If this element is subsequently disqualified
          from the set of qualified elements, the Consumer SHOULD attempt to select the next highest priority element. This process SHOULD be continued
          for all other instances of the qualified elements until success is achieved or all instances are exhausted.
        </t>
      </section>

      <section title="Non-XRDS Elements and Attributes">
        <t>
          XRDS-Simple introduces a few new elements and attributes
          not defined in XRDS which are needed for an easier adoption
          of the format with HTTP Resources. In order to maintain full compatibility, these are
          defined under a separate namespace, and do not change the discovery workflow.
        </t>
        <t>
          To use the extensions the <spanx style="verb">http://xrds-simple.net/core/1.0</spanx> namespace
          MUST be defined. The namespace alias <spanx style="verb">simple</spanx> is shown as an example,
          and can be set to any valid XML namespace alias. For example:
        
          <figure>
            <artwork>
      &lt;XRDS xmlns="xri://$xrds"&gt;
          &lt;XRD xmlns:simple="http://xrds-simple.net/core/1.0" xmlns="xri://$xrd*($v*2.0)" version="2.0"&gt;
              &lt;Type&gt;xri://$xrds*simple&lt;/Type&gt;
              &lt;Service&gt;
                &lt;Type&gt;http://example.net/some_type&lt;/Type&gt;
                &lt;URI&gt;http://example.com/resource&lt;/URI&gt;
                &lt;simple:MustSupport&gt;http://example.net/some_required_parameter&lt;/simple:MustSupport&gt;
              &lt;/Service&gt;
          &lt;/XRD&gt;
      &lt;/XRDS&gt;
            </artwork>
          </figure>
        </t>

        <section title="simple:MustSupport Element" anchor="MustSupport_element">
          <t>
            The <spanx style="verb">simple:MustSupport</spanx> element with type xs:anyURI, indicates that a Resource has certain
            requirements that MUST be supported by the Consumer in order to be utilized. Similar to the
            <spanx style="verb">Type</spanx> element, the <spanx style="verb">simple:MustSupport</spanx> element
            uses namespace URIs to describe the Resource. It instructs Consumer that the Resource requires some additional
            understanding beyond matching some of the types or media-types. Consumers SHOULD always check for
            unknown <spanx style="verb">simple:MustSupport</spanx> element values before selecting or utilizing Resource properties.
          </t>
          <t>
            The element can be considered a sub-type, but carries the additional functionality of instructing
            the Consumer of a hard requirement. Generally, Resources can have many types and media-types, and
            are selected by ensuring the desired types and media-types are present, while ignoring others of no
            value or unknown. <spanx style="verb">simple:MustSupport</spanx> provides a way in which parsers can
            check to see if they are at all capable of interacting with a Resource, even if they are familiar with
            some of its types and media-types.
          </t>
          <t>
            In some cases, an overlap exists between the <spanx style="verb">Type</spanx> and <spanx style="verb">simple:MustSupport</spanx>
            elements. In those cases, both elements SHOULD be included to maintain consistency with existing practices. For example,
            OpenID uses <spanx style="verb">Type</spanx> elements to document both the type of the URI, as well as the OpenID
            extensions it supports. If one of these extensions is REQUIRED, its namespace identifier SHOULD appear in both a
            <spanx style="verb">Type</spanx> and <spanx style="verb">simple:MustSupport</spanx> elements, within the same
            <spanx style="verb">Service</spanx> element.
          </t>
          <t>
            While this element can be defined in a separate specification, it is included as part of XRDS-Simple
            to establish a mechanism for Consumers to detect when they are unable to utilize a discovered Resource.
          </t>
        </section>

        <section title="simple:TemplateURI Element" anchor="TemplateURI_element">
          <t>
            
          </t>
        </section>

      </section>

      <section title="Extension and Deviation">
        <t>
          XRDS-Simple inherits the extendibility of
          XRDS but places strict limitations on the ability
          to extend the format. Any extension used MUST NOT define or cause any deviation
          from the meaning and workflow defined in this specification with regard to the
          discovery process. Extensions MUST be restricted to add only Resource-specific properties.
        </t>
        <t>
          This is particularly true to XRDS elements and attributes
          not explicitly listed and allowed in this specification, as they might significantly
          alter the way in which a document is parsed and URIs selected. For a document
          to legally declare itself as XRDS-Simple, it must be fully compatible with any compliant
          XRDS-Simple parser, as well as any compliant XRDS parser.
        </t>
        <t>
          XRDS-Simple parsers SHOULD look for the existence of a valid
          XRDS-Simple declaration before parsing any
          XRDS documents, as they MAY otherwise produce incorrect results. It is
          also RECOMMENDED that XRDS-Simple parsers attempting to parse
          XRDS documents, include logic to check for elements excluded
          from XRDS-Simple which are known to significantly alter the
          discovery process. This includes but not limited to the <spanx style="verb">Redirect</spanx>
          and <spanx style="verb">Ref</spanx> elements, and the <spanx style="verb">match</spanx> and
          <spanx style="verb">select</spanx> attributes, defined in <xref target="XRI Resolution 2.0" />.
        </t>
      </section>

    </section>
    
    <section title="Information Selection" anchor="desc_selection">
      <t>
        The Discovery Document provides lists of Resource properties grouped together. Once
        the document has been obtained, the Consumer typically performs information selection,
        to extract the properties of the Resources relevant to it. The selection process centers around
        iterating through the list of Resource properties, filtering them based on their type and media-type,
        and selecting them based on their relevance.
      </t>
      <t>
        The information selection process includes two steps:

        <list style="numbers">
          <t>
            Identify the <spanx style="verb">XRD</spanx> element describing the desired Resource or group of
            Resources.
          </t>
          <t>
            Select the <spanx style="verb">Service</spanx> elements matching against the Consumer's desired criteria.
          </t>
        </list>
      </t>

      <section title="XRD Identification" anchor="xrd_identification">
        <t>
          Identifying an <spanx style="verb">XRD</spanx> element within an XRDS-Simple document is done by
          following the identification rules:

          <list style="numbers">
            <t>
              The Consumer MUST find all the XRDS-Simple compliant <spanx style="verb">XRD</spanx> elements
              as defined in <xref target="requirements" />, excluding any expired elements as defined by the
              <xref target="xrd_element">Expired child element</xref>. Any other elements SHALL be ignored in the steps that follow.
              The Consumer MAY choose to filter the list of <spanx style="verb">XRD</spanx> elements further by looking for
              additional <spanx style="verb">Type</spanx> elements matches at the <spanx style="verb">XRD</spanx> level.
            </t>
            <t>
              If the document's location includes a URI fragment as defined in <xref target="go_fetch" />, the Consumer
              MUST look for an <spanx style="verb">XRD</spanx> element with an <spanx style="verb">xml:id</spanx> attribute value
              matching the XRD identifier indicated by the URI fragment. If a match is found, the <spanx style="verb">XRD</spanx>
              element is used as defined in <xref target="service_selection" />, otherwise the discovery process ends unsuccessfully.
            </t>
            <t>
              If the document contains a single <spanx style="verb">XRD</spanx> element, it is used as defined in
              <xref target="service_selection" />.
            </t>
            <t>
              If the document contains multiple <spanx style="verb">XRD</spanx> elements, the last element is used as defined in
              <xref target="service_selection" />.
            </t>
          </list>
        </t>
      </section>
      
      <section title="Service Selection" anchor="service_selection">
        <t>
          Based on the Consumer's needs, the Consumer defines a selection criteria based on the presence (or lack of) certain
          Resource types and media-types. The selection criteria can be any combination of type and media-type values desired by
          the Consumer, as well as looking for specific Resource URIs. For example, a Consumer can look for all Resources
          with an image media-type, an URI with OpenID authentication type, or the properties of a specific
          Resource given its URI.
        </t>
        <t>
          If the selection criteria place higher preference on the presence of certain types or media-types over others, it is handled
          by performing multiple selections. Each selection is assigned preference order based on the Consumer needs and the selection
          results are compared to determine the most desired set. For example, if a Consumer is looking for all image Resources, giving
          higher preference to the JPEG formats over PNG, it will perform two selection processes, one for each media-type, and assign
          the Resources in the JPEG set a higher preference value.
        </t>
        <t>
          Once an <spanx style="verb">XRD</spanx> element has been identified, the Consumer performs the following
          steps in order to select the desired Resource descriptions:
          
          <list style="numbers">
            <t>
              Each <spanx style="verb">Service</spanx> element is compared against the selection criteria by comparing the values of the
              <spanx style="verb">Type</spanx>, <spanx style="verb">MediaType</spanx>, and <spanx style="verb">URI</spanx> elements to
              those defined by the selection criteria.
            </t>
            <t>
              The Consumer SHOULD inspect the matching <spanx style="verb">Service</spanx> elements for <spanx style="verb">simple:MustSupport</spanx>
              elements, and remove from the list any <spanx style="verb">Service</spanx> elements with unknown <spanx style="verb">simple:MustSupport</spanx>
              values.
            </t>
            <t>
              If more than one <spanx style="verb">Service</spanx> element is matched, the Consumer MUST use the <spanx style="verb">priority</spanx>
              attribute values to find the highest priority element as defined in <xref target="priority_attribute" />.
            </t>
            <t>
              Within the priority sorted list of matching <spanx style="verb">Service</spanx> elements, if more than one <spanx style="verb">URI</spanx>
              or <spanx style="verb">LocalID</spanx> elements are present, the Consumer MUST use the <spanx style="verb">priority</spanx>
              attribute values of each element type to find the highest priority element as defined in <xref target="priority_attribute" />.
            </t>
          </list>
        </t>
        <t>
          At the conclusion of the selection process, if any of the Resource descriptions matched the selection criteria, the Consumer will
          obtain a list of Resource descriptions, sorted by their matching preference and priorities.
        </t>
      </section>
      
    </section>

    <appendix title="Example">
      <t>
        The following example list the stores in which an individual name Jane Doe created wish-lists
        for her friends to use to buy her presents. The examples assumes an open standard has been
        established for wish-list representation, which is identified by the namespace URI
        <spanx style="verb">http://specs.example.com/wish_list/1.0</spanx>. According to the wish-list
        specification, requests for a user's wish list include the user's screen name in a URL-encoded
        parameter.
        
        <figure>
          <artwork>
      &lt;XRDS xmlns="xri://$xrds"&gt;
          &lt;XRD xmlns:simple="http://xrds-simple.net/core/1.0" xmlns="xri://$xrd*($v*2.0)" version="2.0"&gt;
              &lt;Type&gt;xri://$xrds*simple&lt;/Type&gt;
              &lt;Service priority="10"&gt;
                &lt;Type&gt;http://specs.example.com/wish_list/1.0&lt;/Type&gt;
                &lt;URI&gt;http://books.example.com/wishlist&lt;/URI&gt;
                &lt;LocalID&gt;jane&lt;/LocalID&gt;
              &lt;/Service&gt;
              &lt;Service priority="20"&gt;
                &lt;Type&gt;http://specs.example.com/wish_list/1.0&lt;/Type&gt;
                &lt;URI priority="10"&gt;https://dvds.example.org/lists/wishes&lt;/URI&gt;
                &lt;URI priority="20"&gt;http://dvds.example.org/lists/wishes&lt;/URI&gt;
                &lt;LocalID&gt;janedoe&lt;/LocalID&gt;
              &lt;/Service&gt;
          &lt;/XRD&gt;
      &lt;/XRDS&gt;
          </artwork>
        </figure>
      </t>
    </appendix>

    <appendix title="Security Considerations">
      <t>

      </t>
    </appendix>

    <appendix title="Acknowledgments">
      <t>
        XRDS-Simple is for the most part, an evolution of many existing specifications, most notably
        <xref target="XRI Resolution 2.0" /> and <xref target="Yadis" />. Much of the text in this
        specification has been adopted directly from these two specifications in an attempt to provide
        implementers an accessible reference for resource discovery.
      </t>
      <t>
        The editor would like to thank the members of the OASIS XRI TC for their dedicated work bringing
        the XRDS format to its current state, and for accommodating the XRDS-Simple use case within
        XRDS and the <xref target="XRI Resolution 2.0" /> specification. In particular, the editor would
        like to thank Drummond Reed and Gabe Wachob for their active role in the creation of XRDS-Simple,
        as well as Markus Sabadello and William Tan for their participation.
      </t>
      <t>
        The editor would like to thank Chris Messina, John Panzer, and David Recordon for their continued
        support and assistance.
      </t>
    </appendix>

  </middle>

  <back>

    <references title="References">
      
      <reference anchor="RFC2046">
        <front>
          <title>Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types</title>
          <author initials="N.F" surname="Freed" fullname="N. Freed">
            <organization>Innosoft</organization>
          </author>
          <author initials="N.B" surname="Borenstein" fullname="N. Borenstein">
            <organization>First Virtual</organization>
          </author>
        </front>
        <seriesInfo name="RFC" value="2046" />
      </reference>

      <reference anchor="RFC2606">
        <front>
          <title>Reserved Top Level DNS Names</title>
          <author initials="D.E" surname="Eastlake" fullname="D. Eastlake">
            <organization></organization>
          </author>
          <author initials="A.P" surname="Panitz" fullname="A. Panitz">
            <organization></organization>
          </author>
        </front>
        <seriesInfo name="RFC" value="2606" />
      </reference>

      <reference anchor="RFC2119">
        <front>
          <title>Key words for use in RFCs to Indicate Requirement Levels</title>
          <author initials="B.S" surname="Bradner" fullname="Scott Bradner">
            <organization>Alis Technologies</organization>
          </author>
        </front>
        <seriesInfo name="RFC" value="2119" />
      </reference>

      <reference anchor="RFC2616">
        <front>
          <title>Hypertext Transfer Protocol -- HTTP/1.1</title>
          <author initials="R.F" surname="Fielding" fullname="R. Fielding">
            <organization>UC Irvine</organization>
          </author>
          <author initials="J.G" surname="Gettys" fullname="J. Gettys">
            <organization>Compaq/W3C</organization>
          </author>
          <author initials="J.M" surname="Mogul" fullname="J. Mogul">
            <organization>Compaq</organization>
          </author>
          <author initials="H.F" surname="Frystyk" fullname="H. Frystyk">
            <organization>W3C/MIT</organization>
          </author>
          <author initials="L.M" surname="Masinter" fullname="L. Masinter">
            <organization>Xerox</organization>
          </author>
          <author initials="P.L" surname="Leach" fullname="P. Leach">
            <organization>Microsoft</organization>
          </author>
          <author initials="T.L" surname="Berners-Lee" fullname="T. Berners-Lee">
            <organization>W3C/MIT</organization>
          </author>
        </front>
        <seriesInfo name="RFC" value="2616" />
      </reference>

      <reference anchor="RFC3986">
        <front>
          <title>Uniform Resource Identifiers (URI): Generic Syntax</title>
          <author initials="T.L" surname="Berners-Lee" fullname="T. Berners-Lee">
            <organization />
          </author>
        </front>
        <seriesInfo name="RFC" value="3986" />
      </reference>

      <reference anchor="XRI Resolution 2.0">
        <front>
          <title>Extensible Resource Identifier (XRI) Resolution V2.0</title>
          <author initials='G.W' surname='Wachob' fullname="Gabe Wachob">
            <organization>Visa International</organization>
          </author>
          <author initials='D.R' surname='Reed' fullname="Drummond Reed">
            <organization>Cordance</organization>
          </author>
          <author initials='L.C' surname='Chasen' fullname="Les Chasen">
            <organization>NeuStar</organization>
          </author>
          <author initials='W.T' surname='Tan' fullname="William Tan">
            <organization>NeuStar</organization>
          </author>
          <author initials='S.C' surname='Churchill' fullname="Steve Churchill">
            <organization>XDI.ORG</organization>
          </author>
        </front>
        <format type="HTML" target="http://docs.oasis-open.org/xri/2.0/specs/xri-resolution-V2.0.html" />
        <format type="PDF" target="http://docs.oasis-open.org/xri/2.0/specs/xri-resolution-V2.0.pdf" />
      </reference>
      
      <reference anchor="Yadis">
        <front>
          <title>Yadis Specification 1.0</title>
          <author initials='J.M' surname='Miller' fullname="Joaquin Miller">
            <organization>NetMesh</organization>
          </author>
        </front>
        <format type='PDF' target="http://yadis.org/papers/yadis-v1.0.pdf" />
        <format type='ODT' target="http://yadis.org/papers/yadis-v1.0.odt" />
      </reference>

      <reference anchor="Microformats">
        <front>
          <title>Microformats Specifications</title>
          <author initials='' surname='Microformats Community' fullname="Microformats Community">
            <organization></organization>
          </author>
        </front>
        <format type='HTML' target="http://microformats.org/" />
      </reference>

      <reference anchor="xml:id">
        <front>
          <title>xml:id Version 1.0, World Wide Web Consortium</title>
          <author initials='J.M' surname='Marsh' fullname="J. Marsh">
            <organization></organization>
          </author>
          <author initials='D.M' surname='Veillard' fullname="D. Veillard">
            <organization></organization>
          </author>
          <author initials='N.M' surname='Walsh' fullname="N. Walsh">
            <organization></organization>
          </author>
        </front>
        <format type='HTML' target="http://www.w3.org/TR/xml-id/" />
      </reference>

      <reference anchor="OpenID Authentication 1.1">
        <front>
          <title>OpenID Authentication 1.1</title>
          <author initials='D.R' surname='Recordon' fullname="David Recordon">
            <organization></organization>
          </author>
          <author initials='B.F' surname='Fitzpatrick' fullname="Brad Fitzpatrick">
            <organization></organization>
          </author>
        </front>
        <format type='HTML' target="http://openid.net/specs/openid-authentication-1_1.html" />
      </reference>

      <reference anchor="OpenID Authentication 2.0">
        <front>
          <title>OpenID Authentication 2.0</title>
          <author initials='O.F' surname='OpenID' fullname="OpenID Foundation">
            <organization></organization>
          </author>
        </front>
        <format type='HTML' target="http://openid.net/specs/openid-authentication-2_0.html" />
      </reference>

    </references>
  </back>

</rfc>
